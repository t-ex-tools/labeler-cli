import Blocklists from './blocklists.js';
import { program } from 'commander';
import fs from 'fs';
import { dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

Promise
  .allSettled(Blocklists)
  .then((values) => init(values.map((v) => v.value)));

let init = (lists) => {
  program
    .name('label')
    .description('A tool to automatically label data sets generated by T.EX using blocklists like EasyList, EasyPrivacy, and the like.')
    .version('0.1.0');

  program.command('json')
    .description('Label an exported JSON file consisting of HTTP requests.')
    .argument('<file>', 'path to JSON file')
    .option('-b, --blocklists <items...>', 'blocklists to use { "EasyList" | "EasyPrivacy" | "Disconnect.me" }', ['EasyPrivacy'])
    .option('-o, --output <file>', 'name of the output file created in current working directory', 'output.json')
    .action((file, options) => {
      let rel = __dirname + '/' + file;
      let path = 
        (fs.existsSync(file)) ?
          file
          : (fs.existsSync(rel)) ?
            rel
            : (console.log('Error: file not found at ' + file), process.exit(1));

      let stats = fs.lstatSync(path);
      if (!stats.isFile()) {
        console.log('Error: ' + path + ' is not a file');
        process.exit(1);
      }

      let json = fs.readFileSync(path);
      try {
        json = JSON.parse(json);
      } catch (err) {
        console.log('Error: Could not parse file contents to JSON');
        process.exit(1);
      }

      lists = lists.filter((l) => options.blocklists.indexOf(l.name) !== -1);
      json = json.map((e, i, array) => {
        console.clear();
        console.log(i + '/' + array.length);
        e.labels = lists.map((l) => l.isLabeled(e));
        return e;
      });

      let output = __dirname + '/' + options.output;
      fs.writeFileSync(output, JSON.stringify(json));
      console.log('Success: Labeled data set written to file ' + output);
      process.exit(0);
    });  

  program.parse();
};